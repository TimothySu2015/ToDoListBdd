// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ToDoListBDD.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class 修改任務描述Feature : object, Xunit.IClassFixture<修改任務描述Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TaskDescriptionUpdate.feature"
#line hidden
        
        public 修改任務描述Feature(修改任務描述Feature.FixtureData fixtureData, ToDoListBDD_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("zh-TW"), "Features", "修改任務描述", "  身為 生產力使用者\r\n  我想要 修改已建立任務的描述內容\r\n  以便 我可以更新任務資訊以反映當前狀況", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="成功修改現有任務描述")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "成功修改現有任務描述")]
        public void 成功修改現有任務描述()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("成功修改現有任務描述", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("系統中存在一個用於更新的任務 ID 為 1，描述為 \"原始任務描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 9
    testRunner.When("我更新任務 ID 1 的描述為 \"更新後的任務描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 10
    testRunner.Then("任務描述應該成功更新", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 11
    testRunner.And("更新回應狀態碼應該是 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
#line 12
    testRunner.And("更新後的任務描述應該是 \"更新後的任務描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
#line 13
    testRunner.And("任務的更新時間應該被更新", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="嘗試修改不存在的任務")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "嘗試修改不存在的任務")]
        public void 嘗試修改不存在的任務()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("嘗試修改不存在的任務", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
    testRunner.Given("系統中不存在任務 ID 為 999 (更新測試)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 17
    testRunner.When("我更新任務 ID 999 的描述為 \"新的描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 18
    testRunner.Then("更新操作應該回傳 404 錯誤", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 19
    testRunner.And("更新錯誤訊息應該包含 \"找不到 ID 為 999 的任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="驗證空白任務描述")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "驗證空白任務描述")]
        public void 驗證空白任務描述()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證空白任務描述", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
    testRunner.Given("系統中存在一個用於更新的任務 ID 為 2，描述為 \"現有描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 23
    testRunner.When("我更新任務 ID 2 的描述為空字串", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 24
    testRunner.Then("應該回傳更新驗證錯誤", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 25
    testRunner.And("更新錯誤訊息應該是 \"請輸入任務描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="驗證任務描述長度限制")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "驗證任務描述長度限制")]
        public void 驗證任務描述長度限制()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證任務描述長度限制", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
    testRunner.Given("系統中存在一個用於更新的任務 ID 為 3，描述為 \"短描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 29
    testRunner.When("我更新任務 ID 3 的描述為超過500字元的文字", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 30
    testRunner.Then("應該回傳更新驗證錯誤", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 31
    testRunner.And("更新錯誤訊息應該是 \"任務描述不能超過 500 字元\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="驗證無效的任務 ID")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "驗證無效的任務 ID")]
        public void 驗證無效的任務ID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證無效的任務 ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
    testRunner.When("我更新任務 ID 0 的描述為 \"有效描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 35
    testRunner.Then("應該回傳更新驗證錯誤", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 36
    testRunner.And("更新錯誤訊息應該是 \"任務 ID 必須大於 0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="更新操作系統日誌記錄")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "更新操作系統日誌記錄")]
        public void 更新操作系統日誌記錄()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("更新操作系統日誌記錄", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 39
    testRunner.Given("系統中存在一個用於更新的任務 ID 為 123，描述為 \"日誌測試任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 40
    testRunner.When("我更新任務 ID 123 的描述為 \"更新後日誌測試\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 41
    testRunner.Then("任務描述應該成功更新", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 42
    testRunner.And("更新操作的系統日誌應該記錄 \"Task description updated: ID=123, Old=\'日誌測試任務\', New=\'更新後日誌測試\'\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="使用相同描述更新任務")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "使用相同描述更新任務")]
        public void 使用相同描述更新任務()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("使用相同描述更新任務", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 45
    testRunner.Given("系統中存在一個用於更新的任務 ID 為 4，描述為 \"相同描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 46
    testRunner.When("我更新任務 ID 4 的描述為 \"相同描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 47
    testRunner.Then("任務描述應該成功更新", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 48
    testRunner.And("更新回應狀態碼應該是 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
#line 49
    testRunner.And("任務的更新時間應該被更新", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="更新已完成任務的描述")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "更新已完成任務的描述")]
        public void 更新已完成任務的描述()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("更新已完成任務的描述", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 51
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 52
    testRunner.Given("系統中存在一個已完成任務 ID 為 5，描述為 \"已完成任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 53
    testRunner.When("我更新任務 ID 5 的描述為 \"修改已完成任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 54
    testRunner.Then("任務描述應該成功更新", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 55
    testRunner.And("任務狀態應該保持為已完成", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="更新待辦任務的描述")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "更新待辦任務的描述")]
        public void 更新待辦任務的描述()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("更新待辦任務的描述", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 58
    testRunner.Given("系統中存在一個待辦任務 ID 為 6，描述為 \"待辦任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 59
    testRunner.When("我更新任務 ID 6 的描述為 \"修改待辦任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 60
    testRunner.Then("任務描述應該成功更新", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 61
    testRunner.And("任務狀態應該保持為待辦", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="資料庫事務完整性驗證")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "資料庫事務完整性驗證")]
        public void 資料庫事務完整性驗證()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("資料庫事務完整性驗證", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 63
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 64
    testRunner.Given("系統中存在一個用於更新的任務 ID 為 7，描述為 \"事務測試任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 65
    testRunner.When("我更新任務 ID 7 的描述為 \"事務更新測試\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 66
    testRunner.And("資料庫操作成功", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
#line 67
    testRunner.Then("任務描述應該在資料庫中正確更新", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 68
    testRunner.And("不應該有任何資料不一致的情況", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="併發更新處理")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "併發更新處理")]
        public void 併發更新處理()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("併發更新處理", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 70
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 71
    testRunner.Given("系統中存在一個用於更新的任務 ID 為 8，描述為 \"併發測試任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 72
    testRunner.When("我同時發送兩個更新請求到任務 ID 8", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 73
    testRunner.Then("其中一個更新應該成功", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 74
    testRunner.And("最終的任務描述應該是其中一個請求的結果", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
#line 75
    testRunner.And("不應該發生資料損壞", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Unicode 字元支援")]
        [Xunit.TraitAttribute("FeatureTitle", "修改任務描述")]
        [Xunit.TraitAttribute("Description", "Unicode 字元支援")]
        public void Unicode字元支援()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unicode 字元支援", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 78
    testRunner.Given("系統中存在一個用於更新的任務 ID 為 9，描述為 \"英文描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 79
    testRunner.When("我更新任務 ID 9 的描述為 \"中文測試 🚀 emoji 支援\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 80
    testRunner.Then("任務描述應該成功更新", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 81
    testRunner.And("任務描述應該正確儲存 Unicode 字元", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                修改任務描述Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                修改任務描述Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
