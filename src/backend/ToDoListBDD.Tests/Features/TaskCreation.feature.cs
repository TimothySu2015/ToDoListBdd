// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ToDoListBDD.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class 新增待辦任務Feature : object, Xunit.IClassFixture<新增待辦任務Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TaskCreation.feature"
#line hidden
        
        public 新增待辦任務Feature(新增待辦任務Feature.FixtureData fixtureData, ToDoListBDD_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("zh-TW"), "Features", "新增待辦任務", "  身為 生產力使用者\r\n  我想要 快速新增待辦任務\r\n  以便 我可以記錄需要完成的工作", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="成功新增待辦任務")]
        [Xunit.TraitAttribute("FeatureTitle", "新增待辦任務")]
        [Xunit.TraitAttribute("Description", "成功新增待辦任務")]
        public void 成功新增待辦任務()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("成功新增待辦任務", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("系統已準備好接收新任務", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 9
    testRunner.When("我提交一個新任務 \"完成專案報告\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 10
    testRunner.Then("任務應該成功建立", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 11
    testRunner.And("任務描述應該是 \"完成專案報告\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
#line 12
    testRunner.And("任務狀態應該是未完成", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
#line 13
    testRunner.And("任務應該有建立時間", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="驗證空白任務描述")]
        [Xunit.TraitAttribute("FeatureTitle", "新增待辦任務")]
        [Xunit.TraitAttribute("Description", "驗證空白任務描述")]
        public void 驗證空白任務描述()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證空白任務描述", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
    testRunner.Given("系統已準備好接收新任務", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 17
    testRunner.When("我提交一個空白任務描述", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 18
    testRunner.Then("應該回傳驗證錯誤", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 19
    testRunner.And("錯誤訊息應該是 \"請輸入任務描述\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="驗證任務描述長度限制")]
        [Xunit.TraitAttribute("FeatureTitle", "新增待辦任務")]
        [Xunit.TraitAttribute("Description", "驗證任務描述長度限制")]
        public void 驗證任務描述長度限制()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證任務描述長度限制", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
    testRunner.Given("系統已準備好接收新任務", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 23
    testRunner.When("我提交一個超過500字元的任務描述", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 24
    testRunner.Then("應該回傳驗證錯誤", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 25
    testRunner.And("錯誤訊息應該是 \"任務描述不能超過 500 字元\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="資料持久化驗證")]
        [Xunit.TraitAttribute("FeatureTitle", "新增待辦任務")]
        [Xunit.TraitAttribute("Description", "資料持久化驗證")]
        public void 資料持久化驗證()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("資料持久化驗證", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 27
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 28
    testRunner.Given("系統已準備好接收新任務", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 29
    testRunner.When("我提交一個新任務 \"測試持久化\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 30
    testRunner.Then("任務應該成功建立", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 31
    testRunner.And("任務應該儲存到資料庫", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                新增待辦任務Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                新增待辦任務Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
