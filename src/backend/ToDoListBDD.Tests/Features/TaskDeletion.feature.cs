// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ToDoListBDD.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class 刪除任務功能Feature : object, Xunit.IClassFixture<刪除任務功能Feature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TaskDeletion.feature"
#line hidden
        
        public 刪除任務功能Feature(刪除任務功能Feature.FixtureData fixtureData, ToDoListBDD_Tests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("zh-TW"), "Features", "刪除任務功能", "  身為 生產力使用者\r\n  我想要 刪除不需要的任務\r\n  以便 我可以保持清單整潔", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="成功刪除現有任務")]
        [Xunit.TraitAttribute("FeatureTitle", "刪除任務功能")]
        [Xunit.TraitAttribute("Description", "成功刪除現有任務")]
        public void 成功刪除現有任務()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("成功刪除現有任務", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 7
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
    testRunner.Given("系統中存在一個任務 ID 為 1，描述為 \"要刪除的任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 9
    testRunner.When("我發送刪除任務請求，任務 ID 為 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 10
    testRunner.Then("任務應該成功刪除", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 11
    testRunner.And("刪除回應狀態碼應該是 204", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
#line 12
    testRunner.And("任務不應該存在於資料庫中", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="嘗試刪除不存在的任務")]
        [Xunit.TraitAttribute("FeatureTitle", "刪除任務功能")]
        [Xunit.TraitAttribute("Description", "嘗試刪除不存在的任務")]
        public void 嘗試刪除不存在的任務()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("嘗試刪除不存在的任務", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
    testRunner.Given("系統中不存在任務 ID 為 999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 16
    testRunner.When("我發送刪除任務請求，任務 ID 為 999", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 17
    testRunner.Then("刪除操作應該回傳 404 錯誤", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 18
    testRunner.And("刪除錯誤訊息應該包含 \"找不到 ID 為 999 的任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="驗證無效的任務 ID")]
        [Xunit.TraitAttribute("FeatureTitle", "刪除任務功能")]
        [Xunit.TraitAttribute("Description", "驗證無效的任務 ID")]
        public void 驗證無效的任務ID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("驗證無效的任務 ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
    testRunner.When("我發送刪除任務請求，任務 ID 為 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 22
    testRunner.Then("應該回傳刪除驗證錯誤", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 23
    testRunner.And("刪除錯誤訊息應該是 \"任務 ID 必須大於 0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="刪除操作系統日誌記錄")]
        [Xunit.TraitAttribute("FeatureTitle", "刪除任務功能")]
        [Xunit.TraitAttribute("Description", "刪除操作系統日誌記錄")]
        public void 刪除操作系統日誌記錄()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("刪除操作系統日誌記錄", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
    testRunner.Given("系統中存在一個任務 ID 為 123，描述為 \"要記錄的任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 27
    testRunner.When("我發送刪除任務請求，任務 ID 為 123", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 28
    testRunner.Then("任務應該成功刪除", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 29
    testRunner.And("刪除操作的系統日誌應該記錄 \"Task deleted: ID=123, Description=要記錄的任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="刪除已完成的任務")]
        [Xunit.TraitAttribute("FeatureTitle", "刪除任務功能")]
        [Xunit.TraitAttribute("Description", "刪除已完成的任務")]
        public void 刪除已完成的任務()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("刪除已完成的任務", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
    testRunner.Given("系統中存在一個已完成任務 ID 為 2，描述為 \"已完成任務\" (刪除測試)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 33
    testRunner.When("我發送刪除任務請求，任務 ID 為 2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 34
    testRunner.Then("任務應該成功刪除", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 35
    testRunner.And("刪除回應狀態碼應該是 204", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="刪除待辦任務")]
        [Xunit.TraitAttribute("FeatureTitle", "刪除任務功能")]
        [Xunit.TraitAttribute("Description", "刪除待辦任務")]
        public void 刪除待辦任務()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("刪除待辦任務", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 38
    testRunner.Given("系統中存在一個待辦任務 ID 為 3，描述為 \"待辦任務\" (刪除測試)", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 39
    testRunner.When("我發送刪除任務請求，任務 ID 為 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 40
    testRunner.Then("任務應該成功刪除", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 41
    testRunner.And("刪除回應狀態碼應該是 204", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="資料庫事務完整性驗證")]
        [Xunit.TraitAttribute("FeatureTitle", "刪除任務功能")]
        [Xunit.TraitAttribute("Description", "資料庫事務完整性驗證")]
        public void 資料庫事務完整性驗證()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("資料庫事務完整性驗證", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 43
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
    testRunner.Given("系統中存在一個任務 ID 為 4，描述為 \"事務測試任務\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "假設");
#line hidden
#line 45
    testRunner.When("我發送刪除任務請求，任務 ID 為 4", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "當");
#line hidden
#line 46
    testRunner.And("資料庫操作成功", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
#line 47
    testRunner.Then("任務應該完全從資料庫移除", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "那麼");
#line hidden
#line 48
    testRunner.And("不應該有任何殘留資料", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "而且");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                刪除任務功能Feature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                刪除任務功能Feature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
